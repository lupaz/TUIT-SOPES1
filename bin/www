#!/usr/bin/env node

/**
 * Module dependencies.
 */


var debug = require('debug')('paginatw:server');
var http = require('http');
//lineas para validar la conexion a la bd
var MongoClient =  require('mongodb').MongoClient;
var mongoUri = "mongodb://127.0.0.1:27017";
var dataBase = "twetter";
/**
 * Get port from environment and store in Express.
 */


MongoClient.connect(mongoUri,function(err,client){
  if(err){
    console.log(err);
    process.exit(1);
  }

  var db = client.db(dataBase);

  var app = require('../app')(db,http);

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */
   const io = require('socket.io').listen(server)

   /*var tuits_collection = db.collection('tuits');
   var total_tuits;
   var total_cates;
   var total_users;
   var user_mas;
   var cater_mas;
   var twets=[];

   io.on('connection', function(socket) {
     console.log('a user connected');
     socket.on('refresh', function(){
      //Sumamos el click
      //traemos todos los twets
      var consulta_tuits='{},{_id:0}';
      tuits_collection.find(consulta_tuits).sort({fecha:-1}).limit(10).toArray(
           function(err,docs){
           if(err) return res.status(404).json({Error:"No se encontro la colección"});
           twets=docs;
       });
       //traemos el total de tuits
       tuits_collection.find({}).count(function(err,count){
           //console.log(count);
           total_tuits=count;
       });

       //traemos el total de usuarios
       tuits_collection.aggregate([ { $group: { _id:{ $toLower: "$user"} } }]).toArray(function(err,users){
           total_users=users.length;
           //console.log(total_users);
       });

       //traemos el total de categorias
       tuits_collection.aggregate([ { $group: { _id:{ $toLower: "$categoria"}}}]).toArray(function(err,cates){
           //console.log(cates.length);
           total_cates=cates.length;
       });

       //traemos el usuario con mas tuits
       tuits_collection.aggregate([ { $group: { _id:{ $toLower: "$user"}, "count": { $sum: 1 } }},{ $sort:{ count:-1}},{$limit:1}]).toArray(function(err,user){
           //console.log(user[0]._id);
           if(user.length>0){
              user_mas=user[0]._id;
           }
       });

       //traemos la categoria con más tuits
       tuits_collection.aggregate([ { $group: { _id:{ $toLower: "$categoria"}, "count": { $sum: 1 } }},{ $sort:{ count:-1}},{$limit:1}]).toArray(function(err,cater){
          // console.log(cater[0]._id);
          if(cater.length>0){
              cater_mas=cater[0]._id;
          }
       });
      //Emitimos el evento que dirá al cliente que hemos recibido el click
      //y el número de clicks que llevamos
      setTimeout(function(){
        console.log('Se respondio al user con ->'+total_tuits);
        socket.emit('res',total_tuits,total_cates,total_users,user_mas,cater_mas,twets);
      },70);
    });
  });*/

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

});
